#include<stdlib.h>
#include<GL/glut.h>
float vertices[8][3] = { {-1, -1, -1},
 {1, -1, -1},
 {1, 1, -1},
 {-1, 1, -1},
 {-1, -1, 1},
{ 1, -1, 1},
 {1, 1, 1},
{-1, 1, 1}};
float colors[8][3] = { {0, 0, 0,},
 {1, 0, 0,},{1, 1, 0,},{0, 1, 0,},{0, 0, 1},{1, 0, 1},{1, 1, 1},{0, 1, 1}};
float theta[3]= {0, 0, 0}; 
int axis=0; 
void polygon(int a,int b,int c,int d)
{
	glBegin(GL_POLYGON);
	glColor3fv(colors[a]);
	glVertex3fv(vertices[a]);
	glColor3fv(colors[b]);
	glVertex3fv(vertices[b]);
	glColor3fv(colors[c]);
	glVertex3fv(vertices[c]);
	glColor3fv(colors[d]);
	glVertex3fv(vertices[d]);
	glEnd();
}
void colorcube(void)
{
	polygon(0,3,2,1);
	polygon(2,3,7,6);
	polygon(0,4,7,3);
	polygon(1,2,6,5);
	polygon(4,5,6,7);
	polygon(0,1,5,4);
}
void display(void)
{
	glClearColor(1.0,1.0,1.0,1.0);
 glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
 glLoadIdentity();
 glRotatef (theta[0], 1, 0, 0); 
 glRotatef (theta[1], 0, 1, 0); 
 glRotatef (theta[2], 0, 0, 1); 
 colorcube();
 glFlush();
 glutSwapBuffers(); 
}
void spinCube()
{
 theta[axis] +=1; // rotate every 2 degrees
 if (theta[axis] > 360) // it the rotation angle crosses 360 degrees, make it 0 degree
 	theta[axis]=0;
 glutPostRedisplay(); // call display again
}
void mouse(int btn, int state, int x, int y)
{
 if (btn==GLUT_LEFT_BUTTON && state==GLUT_DOWN)
 axis=0; // x axis rotation
 if (btn==GLUT_MIDDLE_BUTTON && state==GLUT_DOWN)
 axis=1; // y axis rotation
 if (btn==GLUT_RIGHT_BUTTON && state==GLUT_DOWN)
 axis=2; // z axis rotation
}
void myReshape(int w, int h)
{
 glViewport(0,0,w,h);
 glMatrixMode(GL_PROJECTION);
 glLoadIdentity();
 if(w<=h)
 glOrtho (-5, 5, -5*(float)h/(float)w, 5*(float)h / (float)w, -10, 10);
 else
 glOrtho (-5*(float)w/(float)h, 5*(float)w / (float)h, -5, 5, -10, 10);
 glMatrixMode(GL_MODELVIEW);
}
int main(int argc, char **argv)
{
 glutInit(&argc, argv);
 glutInitDisplayMode(GLUT_DOUBLE|GLUT_RGB|GLUT_DEPTH);
 glutInitWindowSize(1000, 1000);
 glutCreateWindow("Spin a color cube 4mt19cs170");
 glutReshapeFunc(myReshape); // calls myReshape whenever we change the window size
 glutDisplayFunc(display); // call display function
 glutIdleFunc(spinCube); // whenever we are idle, calls spinCube function
 glutMouseFunc(mouse); // calls mouse function whenever we interact with mouse
 glEnable(GL_DEPTH_TEST); // enables depth â€“ for 3D
 glutMainLoop();
 return 0;
}
